[{"/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/index.js":"1","/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/App.js":"2","/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/erc721Abi.js":"3","/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/components/TokenList.js":"4","/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/components/Erc721.js":"5"},{"size":218,"mtime":1655141225676,"results":"6","hashOfConfig":"7"},{"size":2582,"mtime":1655153610871,"results":"8","hashOfConfig":"7"},{"size":7439,"mtime":1655149943789,"results":"9","hashOfConfig":"7"},{"size":259,"mtime":1655153650308,"results":"10","hashOfConfig":"7"},{"size":2053,"mtime":1655153822160,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1lwrj4u",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/index.js",[],["25","26"],"/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/App.js",["27"],"import './App.css';\nimport {useState, useEffect} from 'react';\nimport Web3 from 'web3';\nimport erc721Abi from \"./erc721Abi\"\nimport TokenList from \"./components/TokenList\";\n\nfunction App() {\n  let [web3, setWeb3] = useState('');\n  let [accounts, setAccount] = useState('');\n  const [newErc721addr, setNewErc721Addr] = useState();\n  const [erc721list, setErc721list] = useState([]);\n\n  useEffect(() => {\n      if (typeof window.ethereum !== \"undefined\") { // window.ethereum이 있다면\n          try {\n               web3 = new Web3(window.ethereum);  // 새로운 web3 객체를 만든다\n              setWeb3(web3);\n          } catch (err) {\n              console.log(err);\n          }\n      }\n  }, []);\n\n  const connectWallet = async () => {\n    accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n    });\n\n    setAccount(accounts[0]);\n};\n\n  const addNewErc721Token = async () => {\n\n      const tokenContract = await new web3.eth.Contract(\n          erc721Abi,\n          newErc721addr\n      );\n      const name = await tokenContract.methods.name().call();\n      const symbol = await tokenContract.methods.symbol().call();\n      const totalSupply = await tokenContract.methods.totalSupply().call();\n\n      let arr = [];\n      for (let i = 1; i <= totalSupply; i++) {\n          arr.push(i);\n      }\n      \n      for (let tokenId of arr) {\n          let tokenOwner = await tokenContract.methods\n              .ownerOf(tokenId)\n              .call();\n          if (String(tokenOwner).toLowerCase() === accounts) {\n              let tokenURI = await tokenContract.methods\n                  .tokenURI(tokenId)\n                  .call();\n              setErc721list((prevState) => {\n                  return [...prevState, { name, symbol, tokenId, tokenURI }];\n              });\n          }\n      }\n  }\n  \n\n\treturn (\n    <div className=\"App\">\n        <button\n            className=\"metaConnect\"\n            onClick={() => {\n                connectWallet();\n            }}\n        >\n            connect to MetaMask\n        </button>\n        <div className=\"userInfo\">주소: {accounts}</div>  \n        <div className=\"newErc721\">\n        <input\n            type=\"text\"\n            onChange={(e) => {\n              setNewErc721Addr(e.target.value);  // 입력받을 때마다 newErc721addr 갱신\n              console.log(e)\n            }}\n        ></input>\n        <button onClick={addNewErc721Token}>add new erc721</button>\n      </div>\n      <TokenList web3={web3} account={accounts} erc721list={erc721list} />\n    </div>    \n  );\n}\n\nexport default App;","/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/erc721Abi.js",[],"/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/components/TokenList.js",[],"/Users/Bing72/Codestates/project/beb-04-T7/web3-practice/src/components/Erc721.js",["28"],"import erc721Abi from \"../erc721Abi\";\nimport {useState} from 'react';\n\nfunction Erc721({ web3, account, erc721list }) {\n    const [to, setTo] = useState(\"\");\n\t\tconst sendToken = async (tokenAddr, tokenId) => {\n            const tokenContract = await new web3.eth.Contract(\n                erc721Abi,\n                tokenAddr,\n                {\n                    from: account,\n                }\n            );\n            tokenContract.methods\n                .transferFrom(account, to, tokenId)\n                .send({\n                    from: account,\n                })\n                .on(\"receipt\", (receipt) => {\n                    setTo(\"\");\n                });\n          };\n\t\treturn (\n\t\t  <div className=\"erc721list\">\n\t\t      {erc721list.map((token) => {\n\t\t          return (\n\t\t              <div className=\"erc721token\">\n\t\t                  Name: <span className=\"name\">{token.name}</span>(\n\t\t                  <span className=\"symbol\">{token.symbol}</span>)\n\t\t                  <div className=\"nft\">id: {token.tokenId}</div>\n\t\t                  <img src={\"https://ipfs.io/ipfs/\"+token.tokenURI} width={300} />\n\t\t                  \n\t\t\t\t\t\t\t\t\t\t\t{/* nft 전송 관련 */}\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"tokenTransfer\">\n\t\t                      To:{\" \"}\n\t\t                      <input\n\t\t                          type=\"text\"\n\t\t                          value={to}\n\t\t                          onChange={(e) => {\n\t\t                              setTo(e.target.value);\n\t\t                          }}\n\t\t                      ></input>\n\t\t                      <button\n\t\t                          className=\"sendErc20Btn\"\n\t\t                          onClick={sendToken.bind(\n\t\t                              this,\n\t\t                              token.address,\n\t\t                              token.tokenId\n\t\t                          )}\n\t\t                      >\n\t\t                          send Token\n\t\t                      </button>\n\t\t                  </div>\n\t\t              </div>\n\t\t          );\n\t\t      })}\n\t\t  </div>\n\t\t);\n}\n\nexport default Erc721;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":16,"column":23,"nodeType":"35","endLine":16,"endColumn":48},{"ruleId":"36","severity":1,"message":"37","line":31,"column":21,"nodeType":"38","endLine":31,"endColumn":85},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","Assignments to the 'web3' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]